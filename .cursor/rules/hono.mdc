---
description: Any backend API related work. Hono is a small, simple, and ultrafast web framework built on Web Standards. It works on any JavaScript runtime: Cloudflare Workers, Fastly Compute, Deno, Bun, Vercel, Netlify, AWS Lambda, Lambda@Edge, and Node.js.
globs: 
alwaysApply: false
---
name: Hono Expert
author: T3 Chat
user_message: |
  You are an expert on the Hono web framework. Your primary goal is to answer questions and generate code for Hono applications.
  - Base your answers on the provided context snippets.
  - For any information not covered in the snippets, use the `get_library_docs` tool to search the official Hono documentation by calling `get_library_docs(library_name='/honojs/hono')`.
  - Always provide concise, accurate, and code-first answers.
---

TITLE: Basic Hono "Hello World"
DESCRIPTION: This snippet shows the most basic Hono application. It creates a new Hono instance and defines a single GET route at the root ('/') that returns a "Hello Hono!" text response.
LANGUAGE: TypeScript
CODE:
```
import { Hono } from 'hono'
const app = new Hono()

app.get('/', (c) => {
  return c.text('Hello Hono!')
})

export default app
```

----------------------------------------

TITLE: Hono Routing
DESCRIPTION: Demonstrates basic routing in Hono. It shows how to handle different HTTP methods like GET and POST, and how to access path parameters from the URL.
LANGUAGE: TypeScript
CODE:
```
import { Hono } from 'hono'
const app = new Hono()

// GET method
app.get('/api/posts', (c) => {
  return c.json({ message: 'All posts' })
})

// POST method
app.post('/api/posts', (c) => {
  return c.json({ message: 'Post created' }, 201)
})

// Path parameters
app.get('/api/posts/:id', (c) => {
  const id = c.req.param('id')
  return c.json({ message: `Post with id ${id}` })
})

export default app
```

----------------------------------------

TITLE: Hono Middleware
DESCRIPTION: This snippet illustrates how to create and use middleware in Hono. A simple logger middleware is defined, which logs the request method and path before passing control to the next middleware or the route handler using `next()`.
LANGUAGE: TypeScript
CODE:
```
import { Hono } from 'hono'

const app = new Hono()

// Logger middleware
app.use('*', async (c, next) => {
  console.log(`[${c.req.method}] ${c.req.path}`)
  await next()
})

app.get('/', (c) => c.text('Hello!'))

export default app
```

----------------------------------------

TITLE: Using Hono Validators
DESCRIPTION: Shows how to use Hono's built-in validator middleware to validate incoming data like query parameters, JSON bodies, and headers. The `vValidator` function is used to define validation rules with Zod schemas.
LANGUAGE: TypeScript
CODE:
```
import { Hono } from 'hono'
import { z } from 'zod'
import { vValidator } from '@hono/zod-validator'

const app = new Hono()

const schema = z.object({
  name: z.string(),
  age: z.number(),
})

app.post(
  '/user',
  vValidator('json', schema, (result, c) => {
    if (!result.success) {
      return c.json({ message: 'Validation failed' }, 400)
    }
  }),
  (c) => {
    const { name, age } = c.req.valid('json')
    return c.json({
      message: `Welcome, ${name}! You are ${age} years old.`,
    })
  }
)

export default app
```